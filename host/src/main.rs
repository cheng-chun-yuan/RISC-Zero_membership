// // These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// // The ELF is used for proving and the ID is used for verification.
// use methods::{
//     GUEST_CODE_FOR_ZK_PROOF_ELF, GUEST_CODE_FOR_ZK_PROOF_ID
// };
// use ethabi::ethereum_types::Address;
// use risc0_zkvm::{default_prover, ExecutorEnv};
// fn main() {
//     // Initialize logging
//     env_logger::init();

//     // Prepare input data
//     let address = Address::from_slice(&[
//         0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
//         0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
//         0xde, 0xad, 0xbe, 0xef,
//     ]);

//     // Example list of Ethereum addresses
//     let address_in_array = vec![
//         Address::from_slice(&[
//             0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
//             0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff,
//             0x00, 0x11, 0x22, 0x33,
//         ]),
//         Address::from_slice(&[
//             0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
//             0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
//             0xde, 0xad, 0xbe, 0xef,
//         ]),
//         Address::from_slice(&[
//             0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
//             0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
//             0xad, 0xad, 0xbe, 0xef,
//         ]),
//         Address::from_slice(&[
//             0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
//             0xde, 0xad, 0xbe, 0xef, 0xde, 0xad, 0xbe, 0xef,
//             0xef, 0xad, 0xbe, 0xef,
//         ]),
//     ];

//     // Create an executor environment and add inputs
//     let env = ExecutorEnv::builder()
//         .write(&address).unwrap()
//         .write(&address_in_array).unwrap()
//         .build().unwrap();

//     // Obtain the default prover
//     let prover = default_prover();

//     // Produce a receipt by proving the specified ELF binary
//     let receipt = prover.prove_elf(env, GUEST_CODE_FOR_ZK_PROOF_ELF).unwrap();

//     // Decode the output from the journal
//     let output:bool = receipt.journal.decode().unwrap();

//     // Print the output
//     println!("Proof of guest execution generated. Output: {}", output);

//     // Verify the receipt
//     receipt.verify(GUEST_CODE_FOR_ZK_PROOF_ID).unwrap();
// }

// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    GUEST_CODE_FOR_ZK_PROOF_ELF, GUEST_CODE_FOR_ZK_PROOF_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use ethabi::ethereum_types::Address;
fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    let address = Address::from_slice(&[0x05; 20]);
    let env = ExecutorEnv::builder().write(&address).unwrap().build().unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove_elf(env, GUEST_CODE_FOR_ZK_PROOF_ELF).unwrap();

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // Print the output
    println!("Proof of guest execution generated. Output: {}", _output);

    // Optional: Verify receipt to confirm that recipients will also be able to
    // verify your receipt
    receipt.verify(GUEST_CODE_FOR_ZK_PROOF_ID).unwrap();
}

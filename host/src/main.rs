
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    GUEST_CODE_FOR_ZK_PROOF_ELF, GUEST_CODE_FOR_ZK_PROOF_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use ethabi::ethereum_types::Address;
fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    // STEP1 :(Host): Share private data as input with the guest
    let address = Address::from_slice(&[0x02; 20]);
    let address_in_array : [Address; 5] = [
        Address::from_slice(&[0x00; 20]), // Fake address 1
        Address::from_slice(&[0x01; 20]), // Fake address 2
        Address::from_slice(&[0x02; 20]), // Fake address 3
        Address::from_slice(&[0x03; 20]), // Fake address 4
        Address::from_slice(&[0x04; 20]), // Fake address 5
    ];

    let env = ExecutorEnv::builder().write(&address).unwrap().write(&address_in_array).unwrap().build().unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    //STEP3 : (Host): Generate a receipt and read its journal contents
    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove_elf(env, GUEST_CODE_FOR_ZK_PROOF_ELF).unwrap();

    // Get output value
    let _output: u32 = receipt.journal.decode().unwrap();

    // Print the output
    println!("Proof of guest execution generated. Output: {}", _output);

    // Optional: Verify receipt to confirm that recipients will also be able to
    // verify your receipt
    receipt.verify(GUEST_CODE_FOR_ZK_PROOF_ID).unwrap();
}
